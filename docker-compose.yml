services:
  db:
    image: postgres:15
    container_name: asrecorded_db
    environment:
      POSTGRES_DB: ${DB_NAME:-AsRecorded_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - asrecorded_network
    # OPCIONAL: Healthcheck para asegurar que la BD esté lista antes de que otros servicios dependan de ella.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-AsRecorded_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    container_name: asrecorded_api
    depends_on:
      db:
        condition: service_healthy # Espera a que el healthcheck de la BD pase
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - W:\zMant\IO_ASRECORDED\IN:/app/io_external/imports
      - W:\zMant\IO_ASRECORDED\OUT:/app/io_external/exports
    environment:
      FLASK_APP: api_app.py
      FLASK_DEBUG: 1
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-AsRecorded_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
    networks:
      - asrecorded_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: asrecorded_frontend
    # El comando `npm run dev -- --host` es correcto. El doble guion (--) pasa el flag `--host`
    # directamente al script subyacente (Vite/Remix), haciendo que sea accesible desde fuera del contenedor.
    command: sh -c "npm run dev -- --host"
    ports:
      # Puerto principal de la aplicación Remix/Vite.
      - "3000:3000"
      # Puerto que usa Vite para Hot Module Replacement (HMR). Esencial para desarrollo.
      - "5173:5173"
      # El puerto 8002 era para el antiguo sistema LiveReload de Remix, usualmente no es necesario con Vite. [4]
      # - "8002:8002"
    volumes:
      # Monta el código fuente local para reflejar cambios al instante.
      - ./frontend:/app
      # Truco esencial: Evita que la carpeta node_modules local sobreescriba la del contenedor. [1]
      - /app/node_modules
    environment:
      NODE_ENV: development
      # Habilita el "polling" para que la detección de cambios de archivos funcione correctamente dentro de Docker. [2]
      CHOKIDAR_USEPOLLING: "true"
      # La variable `HOST` es redundante si ya usas el flag `--host` en el comando.
      # HOST: 0.0.0.0
      # Variable para que el cliente (navegador) sepa cómo conectarse al servidor de HMR.
      REMIX_DEV_ORIGIN: http://localhost:3000
      # Conexión del frontend al backend a través de la red interna de Docker.
      API_BASE_URL: http://api:5000/api
      SESSION_SECRET: "tu-secreto-largo-y-aleatorio-aqui"
    depends_on:
     - api
    networks:
      - asrecorded_network

volumes:
  postgres_data:
    driver: local

networks:
  asrecorded_network:
    driver: bridge